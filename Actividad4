# -*- coding: utf-8 -*-
"""
Created on Mon Mar 27 20:31:55 2023

@author: josia
"""

def read_file(filename):
    data = {}
    with open(filename, 'r') as f:
        for line in f:
            name, value1, value2 = line.strip().split(',')
            data[name] = (int(value1), int(value2))
    return data

def write_file(filename, data):
    with open(filename, 'w') as f:
        for name, values in data.items():
            f.write(f"{name},{values[0]},{values[1]}\n")

def add_record(filename):
    name = input("Enter browser name: ")
    value1 = int(input("Enter value 1: "))
    value2 = int(input("Enter value 2: "))
    data = read_file(filename)
    data[name] = (value1, value2)
    write_file(filename, data)

def round_robin(data):
    quantum = int(input("Enter time quantum: "))
    
    waiting_time = 0
    turnaround_time = 0
    total_waiting_time = 0
    total_turnaround_time = 0
    num_processes = len(data)
    
    remaining_time = {name: values[1] for name, values in data.items()}
    arrival_time = {name: values[0] for name, values in data.items()}
    completion_time = {name: None for name in data.keys()}
    
    current_time = 0
    while True:
        done = True
        for name, remaining in remaining_time.items():
            if remaining > 0:
                done = False
                if remaining > quantum:
                    current_time += quantum
                    remaining_time[name] -= quantum
                else:
                    current_time += remaining
                    waiting_time = current_time - arrival_time[name] - data[name][1]
                    turnaround_time = current_time - arrival_time[name]
                    total_waiting_time += waiting_time
                    total_turnaround_time += turnaround_time
                    remaining_time[name] = 0
                    completion_time[name] = current_time
        if done:
            break
    
    print("\nResults:")
    print("Process\tWaiting Time\tTurnaround Time\tCompletion Time")
    for name in data.keys():
        print(f"{name}\t{total_waiting_time/num_processes:.2f}\t\t{total_turnaround_time/num_processes:.2f}\t\t{completion_time[name]}")

    pass

def shortest_job_first(data):
    # Sort the data by burst time (i.e., the second value in the tuple)
    sorted_data = sorted(data.items(), key=lambda x: x[1][1])
    
    waiting_time = 0
    turnaround_time = 0
    total_waiting_time = 0
    total_turnaround_time = 0
    num_processes = len(data)
    
    # Compute waiting time, turnaround time, and completion time for each process
    completion_time = {sorted_data[0][0]: sorted_data[0][1][1]}
    for i in range(1, len(sorted_data)):
        name = sorted_data[i][0]
        waiting_time = completion_time[sorted_data[i-1][0]] - sorted_data[i][1][0]
        if waiting_time < 0:
            waiting_time = 0
        total_waiting_time += waiting_time
        turnaround_time = waiting_time + sorted_data[i][1][1]
        total_turnaround_time += turnaround_time
        completion_time[name] = completion_time[sorted_data[i-1][0]] + sorted_data[i][1][1]
    
    print("\nResults:")
    print("Process\tWaiting Time\tTurnaround Time\tCompletion Time")
    for name in data.keys():
        print(f"{name}\t{total_waiting_time/num_processes:.2f}\t\t{total_turnaround_time/num_processes:.2f}\t\t{completion_time[name]}")

    pass

def fifo(data):
    waiting_time = 0
    turnaround_time = 0
    total_waiting_time = 0
    total_turnaround_time = 0
    num_processes = len(data)
    
    completion_time = {}
    for name, values in data.items():
        if not completion_time:
            waiting_time = 0
        else:
            waiting_time = completion_time[list(completion_time.keys())[-1]] - values[0]
            if waiting_time < 0:
                waiting_time = 0
        total_waiting_time += waiting_time
        turnaround_time = waiting_time + values[1]
        total_turnaround_time += turnaround_time
        completion_time[name] = waiting_time + values[1]
    
    print("\nResults:")
    print("Process\tWaiting Time\tTurnaround Time\tCompletion Time")
    for name in data.keys():
        print(f"{name}\t{total_waiting_time/num_processes:.2f}\t\t{total_turnaround_time/num_processes:.2f}\t\t{completion_time[name]}")

    pass

def priority(data):
    waiting_time = 0
    turnaround_time = 0
    total_waiting_time = 0
    total_turnaround_time = 0
    num_processes = len(data)
    
    sorted_data = dict(sorted(data.items(), key=lambda x: x[1][2]))
    
    # Compute waiting time, turnaround time, and completion time for each process
    completion_time = {}
    for name, values in sorted_data.items():
        if not completion_time:
            waiting_time = 0
        else:
            waiting_time = completion_time[list(completion_time.keys())[-1]] - values[0]
            if waiting_time < 0:
                waiting_time = 0
        total_waiting_time += waiting_time
        turnaround_time = waiting_time + values[1]
        total_turnaround_time += turnaround_time
        completion_time[name] = waiting_time + values[1]
    
    print("\nResults:")
    print("Process\tWaiting Time\tTurnaround Time\tCompletion Time")
    for name in data.keys():
        print(f"{name}\t{total_waiting_time/num_processes:.2f}\t\t{total_turnaround_time/num_processes:.2f}\t\t{completion_time[name]}")

    pass

def main():
    filename = "procesos.txt"
    while True:
        print("\n1. Add record")
        print("2. Round Robin")
        print("3. Shortest Job First")
        print("4. FIFO")
        print("5. Priority")
        print("6. Exit")
        choice = int(input("Enter your choice: "))
        if choice == 1:
            add_record(filename)
        else:
            data = read_file(filename)
            if choice == 2:
                round_robin(data)
            elif choice == 3:
                shortest_job_first(data)
            elif choice == 4:
                fifo(data)
            elif choice == 5:
                priority(data)
            elif choice == 6:
                break
            else:
                print("Invalid choice")

if __name__ == '__main__':
    main()

